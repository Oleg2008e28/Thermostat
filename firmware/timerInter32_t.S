/* timerInter32_t.S
 * Создан: 03.04.2024 01:58:29
 * Нижегородский Государственный технический университет им. Р.Е. Алексеева
 * группа 22-ВМв Хаченков О.И. 
 * Файл включает в себя обработчик прерываний, необходимый для работы класса Time.
 * Прерывание происходит с периодичностью в одну миллисекунду.
 * Счетчик uint32_t timeCounter считает количество миллисекунд, от начала работы процессора.
 * По изменению данной переменной класс Timer вычисляет временные интервалы, кратные одной миллисекунде.
 * В данном проекте используется библиотека V-USB, работа которой критически зависит от времен6и 
 * обработки прерывания INT0_vect. Время обработки прерывания TIMER1_COMPA_vect превосходит максимально 
 * допустимую величину в 25 тактов процессора, поэтому обработка прерывания написана на assembler, и позволяет 
 * обрабатывать прерывания INT0_vect в процессе обработки прерывания TIMER1_COMPA_vect без каких-либо задержек.
 * Это накладывает ограничения на использование других прерываний в проекте. Оно недопустимо. В случае 
 * необходимости использования других прерываний, необходимо адаптировать код обработки прерывания 
 * TIMER1_COMPA_vect, размещенный в этом файле, таким образом, чтобы дополнительные прерывания запрещались 
 * на время обработки прерывания таймера без использования глобального запрета прерываний, а с помощью своих флагов.
 */ 
#define __SFR_OFFSET 0						// Использовать определения регистров, объявленные в avr-libc's
#include <avr/io.h>						    // Подключение библиотеки с определениями низкоуровневых функций 
											// ввода - вывода.
	.extern timeCounter						// Объявление глобальной внешней переменной uint64_t timeCounter
	.text									// Начало блока программы.
	.global TIMER1_COMPA_vect				// Объявление прерывания TIMER1_COMPA_vect
    .type   TIMER1_COMPA_vect, @function	// Определение типа 	

TIMER1_COMPA_vect:							// Начало обработчика прерывания
	push R0									// Сохранение содержимого регистра R0 в стек
	in R0, SREG								// Копирование содержимого регистра SREG в R0
	push R0									// Сохранение содержимого регистра SREG в стек
	push R24								// Сохранение содержимого регистра R24 в стек
	in R24, TIMSK							// Запись содержимого регистра TIMSK в R24
	andi R24, 0xEF							// Запрет прерывания TIMER1_COMPA_vect
	out TIMSK, R24							// Запись нового значения в регистр TIMSK
 	sei										// Глобальное разрешение прерываний	
	push R1									// Сохранение содержимого регистра R1 в стек
	clr R1									// Очистка регистра R1
	out TCNT1+1, R1							// Обнуление старшего байта счетчика TIMER1
	out TCNT1, R1							// Обнуление младшего байта счетчика TIMER1
	push R25								// Сохранение содержимого регистра R25 в стек
	push R26								// Сохранение содержимого регистра R26 в стек
	push R27								// Сохранение содержимого регистра R27 в стек
	push YL									// Сохранение содержимого регистра YL (R28) в стек
	push YH									// Сохранение содержимого регистра YH (R29) в стек
	ldi YL, lo8(timeCounter)				// Запись младшего байта адреса переменной в YL (R28)
	ldi YH, hi8(timeCounter)				// Запись старшего байта адреса переменной в YH (R29)				
	ld R24, Y+								// Копирование четыре байта переменной timeCounter 
	ld R25, Y+								// из памяти данных в регистры общего назначения 
	ld R26, Y+								// R24, R25,
	ld R27, Y								// R26, R27
	adiw R24, 0x01							// прибавление 1 к регистру R24					
	adc R26, R1								// Сложение R26 с константой 0x00 с учетом флага переноса
	adc R27, R1								// Сложение R27 с константой 0x00 с учетом флага переноса
	ldi YL, lo8(timeCounter)				// Запись младшего байта адреса переменной в YL (R28)
	ldi YH, hi8(timeCounter)				// Запись старшего байта адреса переменной в YH (R29)
	st Y+, R24								// Копирование восьми байт переменной timeCounter из регистров 
	st Y+, R25								// общего назначения R24, R25, R26, R27
	st Y+, R26								// в память данных
	st Y, R27								
	pop YH									// Восстановление содержимого регистра YH (R29) из стека
	pop YL									// Восстановление содержимого регистра YL (R28) из стека							
	pop R27									// Восстановление содержимого регистра R27 из стека
	pop R26									// Восстановление содержимого регистра R26 из стека
	pop R25									// Восстановление содержимого регистра R25 из стека
	pop R1									// Восстановление содержимого регистра R1 из стека
	in R24, TIMSK							// Запись содержимого регистра TIMSK в R24
	ori R24, 0x10							// Разрешение прерывания TIMER1_COMPA_vect
	out TIMSK, R24							// Запись нового значения в регистр TIMSK
	pop R24									// Восстановление содержимого регистра R24 из стека
	pop R0									// Копирование содержимого регистра SREG из стека в R0
	out SREG, R0							// Восстановление содержимого регистра SREG
	pop R0									// Восстановление содержимого регистра R0 из стека
	reti									//Выход из обработчика прерываний


