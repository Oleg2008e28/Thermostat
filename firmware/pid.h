/* pid.h
 * Заголовочный файл класса ПИД регулятора
 * Создан: 16.03.2024 23:47:46
 * Нижегородский Государственный технический университет им. Р.Е.Алексеева
 * группа 22-ВМв Хаченков О.И. 
 */ 

#ifndef PID_H_
#define PID_H_
#include <avr/io.h>
#include <math.h>
#include "max6675.h"
#include "timer.h"

class PidRegula{
public:
	PidRegula(volatile uint8_t & portOut, int8_t pinOut);	//Конструктор объекта ПИД регулятора
	void calculatePID(Max6675 & max6675);					//Метод производит вычисления ПИД регулятора
	inline bool cheackPwmPinActive();						//Метод проверяет, активен ли выход ШИМ в данный момент
	float getCarentTemperature();							//Метод возвращает текущую температуру
	float getDiffer();										//Метод возвращает дифференциальную составляющую регулирование
	uint16_t getIntegDifferTime();							//Метод возвращает время дифференцирование/интегрирования
	float getIntegr();										//Метод возвращает интегральную составляющую регулирования
	float getKd();											//Метод возвращает дифференциальный коэффициент
	float getKi();											//Метод возвращает интегральный коэффициент
	float getKp();											//Метод возвращает пропорциональный коэффициент
	uint16_t getMinPwmTime();								//Метод возвращает длительность одной ступени ШИМ
	float getOut();											//Метод возвращает расчетную величину выхода регулятора
	float getPidError();									//Метод возвращает ошибку ПИД регулятора
	float getProposh();										//Метод возвращает пропорциональную составляющую регулирования
	uint16_t getSetPoint();									//Метод возвращает величину уставки
	uint16_t getStepsPwm();									//Метод возвращает количество ступеней ШИМ
	void pwm();												//Метод формирует импульсный выходной сигнал ШИМ
	void setKd(float KD);									//Метод устанавливает дифференциальный 
	void setKi(float KI);									//Метод устанавливает интегральный коэффициент
	void setKp(float KP);									//Метод устанавливает пропорциональный коэффициент
	void setMinPwmTime(uint16_t MinPwmTime);				//Метод устанавливает длительность одной ступени ШИМ
	void setPidSP(uint16_t setPointNew); 					//Метод устанавливает уставку по температуре для ПИД регулятора
	void setStartVP(uint16_t value);						//Метод устанавливает начальное значение уставки перед запуском
	void setStepsPwm(uint16_t StepsPwm);					//Метод устанавливает количество ступеней ШИМ
	void setTime(uint16_t IntegDifferTime);					//Метод устанавливает время интегрирования/дифференцирования
private:
	uint16_t backVeriablePoint;								//Предыдущее значение измеренной температуры
	uint16_t counterPWM;									//Переменная счетчик, используется для формирования ШИМ
	float Differ;											//Дифференциальная составляющая
	uint16_t integDifferTime;								//Время интегрирования/дифференцирования	
	float Integr;											//Интегральная составляющая
	float Kd;												//Дифференциальный коэффициент
	float Ki;												//Интегральный коэффициент
	float Kp;												//Пропорциональный коэффициент	
	uint16_t minPwmTime;									//Длительность одной ступени ШИМ
	float out;												//Расчетная величина выхода ПИД регулятора
	float pidError;											//Ошибка ПИД регулятора
	float pidErrorOld;										//Предыдущая ошибка ПИД регулятора
	uint8_t pidOutPin;										//Номер пина в порту для выхода ШИМ
	volatile uint8_t * pidOutPort;							//Указать на порт для выхода ШИМ	
	float Proposh;											//Пропорциональная составляющая
	float sp;												//Уставка по температуре	
	uint16_t stepsPwm;										//Количество ступеней ШИМ		
	Time timer;												//Таймер, отмеряющий время интегрирования/дифференцирования
	Time timerPwmSteps;										//Таймер, участвующий в формировании сигнала ШИМ
	float VP;												//Текущая температура
};
#endif /* PID_H_ */
