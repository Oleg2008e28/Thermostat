/* oled_ssd1306_128X64.h
 * Создан: 09.03.2024 22:25:12
 * Нижегородский Государственный технический университет им. Р.Е. Алексеева
 * группа 22-ВМв Хаченков О.И. 
 * Заголовочный файл драйвера oled 0,96" дисплея, построенного на
 * контроллере ssd1306. Размер экрана 128x64 пикселя.
 * Управляется дисплей по четырехпроводной шине SPI.
 */ 

#ifndef OLED_SSD1306_128X64_H_
#define OLED_SSD1306_128X64_H_
#include <avr/io.h>
#include <avr/pgmspace.h>
#include "SPI_Unit.h"

#define EXICUTION_DELAY 10		//Выдержка времени, чтобы дисплей принял команду 
#define TRIGGER_DELAY 1			//Выдержка времен6и при переключении чтобы передавать данные или команды

//Массивы в памяти программ, хранят графические элементы, цифры, буквы и логотипы
PROGMEM const uint8_t p []  ={
		/* Code: 0x00, Character: '0' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xE0,0x70,0x38,0x1C,0x0E,0x07,0xFF,0xFF,0xFF,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x01, Character: '1' */
		0x00,0x00,0x00,0x00,0x00,0xC0,0xE0,0xF0,0x78,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x1C,0x1C,0x1F,0x1F,0x1F,0x1C,0x1C,0x1C,0x1C,
		/* Code: 0x02, Character: '2' */
		0x00,0x00,0x00,0x00,0x70,0x78,0x7C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,0x1C,0x0F,0x07,0x03,
		0x00,0x00,0x00,0x00,0x1C,0x1E,0x1F,0x1F,0x1D,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
		/* Code: 0x003, Character: '3' */
		0x00,0x00,0x00,0x00,0x70,0x78,0x7C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x1C,0x1C,0xFF,0xF7,0xE3,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x04, Character: '4' */
		0x00,0x00,0x00,0x00,0x00,0xE0,0xFC,0xFC,0x1C,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,
		0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x38,0x38,0x38,0x38,0x38,0xFF,0xFF,0xFF,0x38,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x00,
		/* Code: 0x05, Character: '5' */
		0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,
		0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0xFE,0xFC,0xF8,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x06, Character: '6' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x7C,0x78,0x70,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x07, Character: '7' */
		0x00,0x00,0x00,0x00,0x3C,0x3C,0x3C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xFC,0xFC,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x0E,0x07,0x03,0x01,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x00,0x00,0x00,0x00,
		/* Code: 0x08, Character: '8' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0xE3,0xF7,0xFF,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFF,0xF7,0xE3,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x09, Character: '9' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFF,0xFF,0xFF,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x0A, Character: 'V' */
		0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,
		0x00,0x00,0x00,0x00,0x0F,0x7F,0xFF,0xF0,0x80,0x00,0x00,0x80,0xF0,0xFF,0x7F,0x0F,
		0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x07,0x1F,0x3C,0x3C,0x1F,0x07,0x03,0x00,0x00,
		/* Code: 0x0B, Character: 'P' */
		0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xF8,0xF0,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x0F,0x07,
		0x00,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* Code: 0x0C, Character: 'S' */
		0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x7C,0x78,0x70,
		0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,
		0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x0D, Character: 'C' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x7C,0x78,0x70,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,
		/* Code: 0x0E, Character: '°' */
		0x00,0x00,0x00,0x00,0xF0,0xF8,0xFC,0x1C,0x1C,0x1C,0x1C,0x1C,0xFC,0xF8,0xF0,0x00,
		0x00,0x00,0x00,0x00,0x07,0x0F,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1F,0x0F,0x07,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* Code: 0x0F, Character: '-' */
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x08,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x08,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		/* Code: 0x10, Character: 'U' */
		0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
		0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0E,0x1C,0x18,0x18,0x0C,0x0E,0x07,0x03,0x01
	};

PROGMEM const uint8_t usb_logo[] = {
		0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x78,0xFE,0xC6,0x83,
		0x83,0x83,0x83,0x06,0x1E,0x18,0x00,0x00,0xFF,0xFF,0xC3,0xC3,0xC3,0xC3,0xE7,0x7E,
		0x1C,0x00,0x00,0x00,0x00,0x70,0xF0,0x70,0x02,0xFF,0x02,0xB8,0x78,0x38,0x00,0x00,
		0x3F,0x7F,0x60,0xC0,0xC0,0xC0,0xC0,0x60,0x7F,0x3F,0x00,0x00,0x18,0x78,0x60,0xC1,
		0xC1,0xC1,0xC1,0x63,0x7F,0x1E,0x00,0x00,0xFF,0xFF,0xC0,0xC0,0xC0,0xC0,0xE3,0x7F,
		0x1E,0x00,0x00,0x00,0x00,0x00,0x01,0x62,0xF4,0xFF,0xF1,0x60,0x00,0x00,0x00,0x00
	};

PROGMEM const uint8_t logo[] = {
		0x03,0x03,0x03,0x03,0xFF,0xFF,0x03,0x03,0x03,0x03,0x00,0x00,0xFF,0xFF,0x83,0x83,
		0x83,0x83,0xC7,0xFE,0x38,0x00,0x00,0xFF,0xFF,0x0E,0x1C,0x38,0x38,0x1C,0x0E,0xFF,
		0xFF,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0xFC,0xFE,0x03,
		0x03,0x83,0xC3,0xE3,0x73,0xFE,0xFC,0x00,0x00,0x00,0x0C,0x0E,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x00,0xFF,0xFF,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0xFF,
		0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x00,0x00,0x3F,0x7F,0xCE,0xC7,0xC3,0xC1,0xC0,0xC0,0x7F,0x3F,0x00,
		0x00,0xC0,0xC0,0xC0,0xFF,0xFF,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
#define RESET_DDR DDRA						//Управляющий регистр порта для выхода сброса дисплея
#define RESET_PORT PORTA					//Порт для выхода сброса дисплея
#define RESET_PIN PA5						//Номер пина для выхода сброса дисплея

#define CS0_DDR DDRA						//Управляющий регистр порта выбора чипа
#define CS0_PORT PORTA						//Порт выбора чипа
#define CS0_PIN PA3							//Номер пина для вывода выбора чипа

#define DATA_COMMAND_DDR DDRA				//Управляющий регистр для порта выбора данных или команд
#define DATA_COMMAND_PORT PORTA				//Порт для выбора данных или команд
#define DATA_COMMAND_PIN PA4				//Номер пина для выбора данных или команд

class Displey_ssd1306_128x64{
public:
	void init(SPI_UNIT & spi);				//Метод инициализации объекта дисплея
	void reset();							//Метод сброса дисплея
	void cleare();							//Метод очистки дисплея
	void printLogo();						//Метод печати логотипа
	void printUSBlable();					//Метод печати логотипа USB
	void deleteUSBlable();					//Метод стирания логотипа USB
	void printSP(uint16_t n);				//Метод печати уставки
	void printVP(uint16_t n);				//Метод печати измеренной температуры
	void printVPerr();						//Метод печати сообщения об ошибке термопреобразования
	void setBrightness(uint8_t drightness); //Метод установки яркости дисплея
	void onDispley();						//Метод включения режима отображения данных на дисплее
	void offDispley();						//Метод отключения режима отображения данных на дисплее
	bool getBacklightStatus();				//Метод получения информации о состоянии отображения данных
private:
	void setFrame(uint8_t startRow, 
				  uint8_t endRow, 
				  uint8_t startColom, 
				  uint8_t endColom);		//Метод установки области вывода на экране
	void command();							//Метод установки режима передачи команд дисплею
	void data();							//Метод установки режима передачи данных дисплею
	void select();							//Метод выбора дисплея на шине SPI
	void unselect();						//Метод отмены выбора дисплея на шине SPI
	SPI_UNIT * spi_pointer;					//Указатель на SPI модуль через который выполняется связь
	bool flagBackLightOn;					//Переменная для хранения информации о включенном/отключенном режиме отображения
};
#endif /* OLED_SSD1306_128X64_H_ */
