/* spi_unit.cpp
 * Создан: 29.02.2024 23:22:05
 * Нижегородский Государственный технический университет им. Р.Е. Алексеева
 * группа 22-ВМв Хаченков О.И. 
 * Исполнительный файл реализации класса модуля SPI, который организует
 * обмен данными между устройствами.
 */ 
#include "SPI_Unit.h"

void SPI_UNIT::init(){
	SCLK_DDR |= 1 << SCLK_PIN;					//Настройка тактового выхода
	SCLK_PORT |= 1 << SCLK_PIN;					//Установка его в единичное состояние
	MISO_DDR &= ~(1 << MISO_PIN);				//Настройка порта на вход
	MISO_PORT|= 1 << MISO_PIN;					//Включение подтяжки
	MOSI_DDR |= 1 << MOSI_PIN;					//Настройка порта на выход
	MOSI_PORT|= 1 << MOSI_PIN;					//Установка в единичное состояние
}
uint8_t SPI_UNIT::receivByte(){
	
	uint8_t tmp = 0x00;							//Прием данных в переменную tmp выполняется старшим битом вперед
	for (int i = 0; i < 8; i++){
		tmp = tmp << 1;							//Сдвиг бит в переменной tmp влево на одну позицию
		SCLK_PORT &= ~(1<<SCLK_PIN);			//Подача тактового сигнала (падающий фронт)
		delay_spi;								//Задержка для установки уровня на линии и приема сигнала периферийным оборудованием
		if ((MISO_PORT_IN & (1 << MISO_PIN)) != 0){
			tmp |= 1 << 0;						//Если на входе модуля высокий уровень, записываем в переменную 1.
		}
		delay_spi;								//Снова задержка для установки уровня на линии
		SCLK_PORT |= 1<<SCLK_PIN;				//Отпускаем тактовый импульс
		delay_spi;								//Снова задержка для установки уровня на линии
	}
	return tmp;
}
uint16_t SPI_UNIT::receivWord(){
	uint16_t tmp = 0x00;						//Прием данных в переменную tmp выполняется старшим битом вперед
	for (int i = 0; i < 16; i++){
		tmp = tmp << 1;							//Сдвиг бит в переменной tmp влево на одну позицию
		SCLK_PORT &= ~(1<<SCLK_PIN);			//Подача тактового сигнала (падающий фронт)
		delay_spi;								//Задержка для установки уровня на линии и приема сигнала периферийным оборудованием
		if ((MISO_PORT_IN & (1 << MISO_PIN)) != 0){
			tmp |= 1 << 0;						//Если на входе модуля высокий уровень, записываем в переменную 1.
		}
		delay_spi;								//Снова задержка для установки уровня на линии
		SCLK_PORT |= 1<<SCLK_PIN;				//Отпускаем тактовый импульс
		delay_spi;								//Снова задержка для установки уровня на линии
	}
	return tmp;
}
void SPI_UNIT::transmissionByte(uint8_t byte){

	for (int i = 0; i < 8; i++){
		if ((byte & 0x80) == 0){
			MOSI_PORT &= ~(1<<MOSI_PIN);		//Передача данных выполняется старшим битом вперед
		}										//Значение старшего бита переменно byte устанавливается на выход MOSI
		else{
			MOSI_PORT |= (1<<MOSI_PIN);
		}
		delay_spi;								//Задержка на установку уровней на шине SPI
		SCLK_PORT &= ~(1<<SCLK_PIN);			//Подача тактового сигнала
		delay_spi;								//Задержка
		SCLK_PORT |= 1<<SCLK_PIN;				//Снятие тактового сигнала
		byte = byte << 1;						//Сдвиг содержимого byte
		delay_spi;								//Снова задержка
	}
	MOSI_PORT |= (1<<MOSI_PIN);					//После окончания передачи установить на выходе высокий уровень
}






		 
